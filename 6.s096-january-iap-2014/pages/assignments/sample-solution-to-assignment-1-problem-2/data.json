
{
  "title":"Sample Solution to Assignment 1, Problem 2",
  "content":"« Back to Assignments\n/* PROG: matrix LANG: C */ #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define MAXN 300 typedef struct Matrix { size_t R, C; int index[MAXN][MAXN]; } Matrix; void read_matrix( FILE *fin, Matrix *matrix ) { fscanf( fin, \u0026#34;%zu %zu\u0026#34;, \u0026amp;matrix-\u0026gt;R, \u0026amp;matrix-\u0026gt;C ); if( matrix-\u0026gt;R \u0026gt;= MAXN || matrix-\u0026gt;C \u0026gt;= MAXN ) { printf( \u0026#34;Error: tried to read matrix with a dimension larger than %d\\n\u0026#34;, MAXN ); exit( EXIT_FAILURE ); } for( size_t r = 0; r \u0026lt; matrix-\u0026gt;R; ++r ) { for( size_t c = 0; c \u0026lt; matrix-\u0026gt;C; ++c ) { fscanf( fin, \u0026#34;%d\u0026#34;, \u0026amp;matrix-\u0026gt;index[r][c] ); } } } void print_matrix( FILE *fout, Matrix *matrix ) { fprintf( fout, \u0026#34;%zu %zu\\n\u0026#34;, matrix-\u0026gt;R, matrix-\u0026gt;C ); for( size_t r = 0; r \u0026lt; matrix-\u0026gt;R; ++r ) { for( size_t c = 0; c \u0026lt; matrix-\u0026gt;C - 1; ++c ) { fprintf( fout, \u0026#34;%d \u0026#34;, matrix-\u0026gt;index[r][c] ); } fprintf( fout, \u0026#34;%d\\n\u0026#34;, matrix-\u0026gt;index[r][matrix-\u0026gt;C - 1] ); } } void mult_matrix( Matrix *a, Matrix *b, Matrix *prod ) { if( a-\u0026gt;C != b-\u0026gt;R ) { printf( \u0026#34;Error: tried to multiply (%zux%zu)x(%zux%zu)\\n\u0026#34;, a-\u0026gt;R, a-\u0026gt;C, b-\u0026gt;R, b-\u0026gt;C ); exit( EXIT_FAILURE ); } size_t inner = a-\u0026gt;C; prod-\u0026gt;R = a-\u0026gt;R; prod-\u0026gt;C = b-\u0026gt;C; for( size_t r = 0; r \u0026lt; prod-\u0026gt;R; ++r ) { for( size_t c = 0; c \u0026lt; prod-\u0026gt;C; ++c ) { prod-\u0026gt;index[r][c] = 0; for( size_t i = 0; i \u0026lt; inner; ++i ) { prod-\u0026gt;index[r][c] += a-\u0026gt;index[r][i] * b-\u0026gt;index[i][c]; } } } } int main(void) { FILE *fin = fopen( \u0026#34;matrix.in\u0026#34;, \u0026#34;r\u0026#34; ), *fout = fopen( \u0026#34;matrix.out\u0026#34;, \u0026#34;w\u0026#34; ); if( fin == NULL ) { printf( \u0026#34;Error: could not open matrix.in\\n\u0026#34; ); exit( EXIT_FAILURE ); } if( fin == NULL ) { printf( \u0026#34;Error: could not open matrix.out\\n\u0026#34; ); exit( EXIT_FAILURE ); } Matrix a, b, c; read_matrix( fin, \u0026amp;a ); read_matrix( fin, \u0026amp;b ); fclose( fin ); mult_matrix( \u0026amp;a, \u0026amp;b, \u0026amp;c ); print_matrix( fout, \u0026amp;c ); fclose( fout ); return 0; } Below is the output using the test data:\nmatrix: 1: OK [0.004 seconds] 2: OK [0.004 seconds] 3: OK [0.004 seconds] 4: OK [0.013 seconds] 5: OK [0.009 seconds] 6: OK [0.006 seconds] 7: OK [0.011 seconds] 8: OK [0.011 seconds] 9: OK [0.012 seconds] 10: OK [0.004 seconds] « Back to Assignments "}


